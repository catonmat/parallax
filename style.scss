@function calculateREM($size, $unit: "px") {
  @if($unit == "px"){
    $rem-base: 16;
    $remSize: $size / $rem-base;
    @return #{$remSize}rem;
  }
}
// Mixins: Dimensions, padding, margin & positioning
@mixin dimensions($width, $height, $unit) {
  @if($unit == "px") {
    width: if($width == "auto", auto, calculateREM($width));
    height: if($height == "auto", auto, calculateREM($height));
  } @else {
    width: if($width == "auto", auto, #{$width+$unit});
    height: if($height == "auto", auto, #{$height+$unit});
  }
}
@mixin padding($top, $right, $bottom, $left, $unit) {
  @if($unit == "px") {
    padding-top: calculateREM($top);
    padding-right: calculateREM($right);
    padding-bottom: calculateREM($bottom);
    padding-left: calculateREM($left);
  } @else {
    padding: $top $right $bottom $left;
  }
}
@mixin margin($top, $right, $bottom, $left, $unit) {
  @if($unit == "px") {
    margin-top: calculateREM($top);
    margin-right: calculateREM($right);
    margin-bottom: calculateREM($bottom);
    margin-left: calculateREM($left);
  } @else {
    margin: $top $right $bottom $left;
  }
}
@mixin position($top, $right, $bottom, $left, $unit) {
  @if($unit == "px") {
    top: if($top == "auto", auto, calculateREM($top));
    right: if($right == "auto", auto, calculateREM($top));
    bottom: if($bottom == "auto", auto, calculateREM($top));
    left: if($left == "auto", auto, calculateREM($top));
  } @else {
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
  }
}
@mixin flexbox($flex-direction: row, $justify-content: center) {
  display: flex;
  justify-content: $justify-content;
  flex-direction: $flex-direction;
  align-items: center;
}

//Global
$small-viewport: 800px;

//Navbar Container
$navbar-font-color: white;
$navbar-height: 5vh;
$navbar-width: 100vw;
$navbar-ul-font-weight: 900;
$navbar-font-size: calculateREM(20, "px");
$navbar-li-text-shadow: calculateREM(0.5, "px") calculateREM(0.5, "px") rgba(255,255,255,0.1);
$sm-nav-bar-font-size: calculateREM(14, "px");;

//Parallax
$parallax-wrapper-height: 100vh;

body {
  padding: 0;
  margin: 0;
  font-family:'Playfair Display', serif;
}

a {
  color: $navbar-font-color;
  text-decoration: none;
  &:visited {
    color: $navbar-font-color;
  }
}

.navbar-container {
  @media(max-width: $small-viewport) {
    font-size: $sm-nav-bar-font-size
  }
  width: $navbar-width;
  height: $navbar-height;
  display: flex;
  justify-content: space-between;
  align-items: center;
  color: $navbar-font-color;
  font-size: $navbar-font-size;
  position: fixed;
  top: 0;
  z-index: 5;
  .title {
    @include margin(0, 0, 0, 10, "px");
  }
  ul {
    display: flex;
    justify-content: space-evenly;
    align-items: center;
    list-style-type: none;
    li {
      @include margin(0, 10, 0, 40, "px");
      &:hover {
        font-weight: $navbar-ul-font-weight;
        text-shadow: $navbar-li-text-shadow
      }
      @media(max-width: $small-viewport) {
        @include margin(0, 15, 0, 0, "px");
      }
    }
  }
}

.parallax-wrapper {
  /* The height needs to be set to a fixed value for the effect to work.*/
  height: $parallax-wrapper-height;
  /* The scaling of the images would add a horizontal scrollbar, so disable x overflow. */
  overflow-x: hidden;
  /* Enable scrolling on the page. */
  overflow-y: auto;
  /* Set the perspective to 2px. This is essentailly the simulated distance from the viewport to transformed objects.*/
  perspective: 2px;
}

.section {
  /* Needed for children to be absolutely positioned relative to the parent. */
  position: relative;
  /* The height of the container. Must be set, but it doesn't really matter what the value is. */
  height: 100vh;
  /* For text formatting. */
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  text-shadow: 0 0 5px #000;
}

.parallax::after {
  /* Display and position the pseudo-element */
  content: " ";
  position: absolute;
  height: 100%;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  /* Move the pseudo-element back away from the camera,
   * then scale it back up to fill the viewport.
   * Because the pseudo-element is further away, it appears to move more slowly, like in real life. */
  transform: translateZ(-1px) scale(1.5);
  /* Force the background image to fill the whole element. */
  background-size: 100%;
  /* Keep the image from overlapping sibling elements. */
  z-index: -1;
}

/* Sets the actual background images to adorable kitties. This part is crucial. */
.bg1::after {
  background-image: url('assets/images/cover-allprettiedup.png');
  background-size: cover;
  background-repeat: none;
}

.bg2::after {
  background-image: url('assets/images/cover-alibi.png');
  background-size: cover;
  background-repeat: none;
}

.bg3::after {
  background-image: url('assets/images/cover-thescene.png');
  background-size: cover;
  background-repeat: none;
}

/* The styling for the static div. */
.static {
  background: black;
  height: 65vh;
  opacity: 0.5;
}

.contact-section {
  background: black;
  height: 100vh;
}

